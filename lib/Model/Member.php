<?php
/**
 * Member
 *
 * PHP version 5
 *
 * @category Class
 * @package  iBooking\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iBookings API - Final
 *
 * iBooking components
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iBooking\Client\Model;

use \ArrayAccess;
use \iBooking\Client\ObjectSerializer;

/**
 * Member Class Doc Comment
 *
 * @category Class
 * @package  iBooking\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Member implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Member';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'customer_number' => 'int',
'username' => 'string',
'firstname' => 'string',
'lastname' => 'string',
'date_of_birth' => '\DateTime',
'gender' => 'string',
'gym' => '\iBooking\Client\Model\MemberGym',
'phone' => 'string',
'email' => 'string',
'address' => '\iBooking\Client\Model\Address',
'first_created' => '\DateTime',
'contract_started' => '\DateTime',
'offerings' => 'int[]',
'active' => 'bool',
'frozen' => 'bool',
'has_accepted_communication' => '\iBooking\Client\Model\CommunicationChannels',
'in_loyality_program' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'customer_number' => 'int64',
'username' => null,
'firstname' => null,
'lastname' => null,
'date_of_birth' => 'date',
'gender' => null,
'gym' => null,
'phone' => null,
'email' => null,
'address' => null,
'first_created' => 'date',
'contract_started' => 'date',
'offerings' => 'int64',
'active' => null,
'frozen' => null,
'has_accepted_communication' => null,
'in_loyality_program' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'customer_number' => 'customerNumber',
'username' => 'username',
'firstname' => 'firstname',
'lastname' => 'lastname',
'date_of_birth' => 'dateOfBirth',
'gender' => 'gender',
'gym' => 'gym',
'phone' => 'phone',
'email' => 'email',
'address' => 'address',
'first_created' => 'firstCreated',
'contract_started' => 'contractStarted',
'offerings' => 'offerings',
'active' => 'active',
'frozen' => 'frozen',
'has_accepted_communication' => 'hasAcceptedCommunication',
'in_loyality_program' => 'inLoyalityProgram'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'customer_number' => 'setCustomerNumber',
'username' => 'setUsername',
'firstname' => 'setFirstname',
'lastname' => 'setLastname',
'date_of_birth' => 'setDateOfBirth',
'gender' => 'setGender',
'gym' => 'setGym',
'phone' => 'setPhone',
'email' => 'setEmail',
'address' => 'setAddress',
'first_created' => 'setFirstCreated',
'contract_started' => 'setContractStarted',
'offerings' => 'setOfferings',
'active' => 'setActive',
'frozen' => 'setFrozen',
'has_accepted_communication' => 'setHasAcceptedCommunication',
'in_loyality_program' => 'setInLoyalityProgram'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'customer_number' => 'getCustomerNumber',
'username' => 'getUsername',
'firstname' => 'getFirstname',
'lastname' => 'getLastname',
'date_of_birth' => 'getDateOfBirth',
'gender' => 'getGender',
'gym' => 'getGym',
'phone' => 'getPhone',
'email' => 'getEmail',
'address' => 'getAddress',
'first_created' => 'getFirstCreated',
'contract_started' => 'getContractStarted',
'offerings' => 'getOfferings',
'active' => 'getActive',
'frozen' => 'getFrozen',
'has_accepted_communication' => 'getHasAcceptedCommunication',
'in_loyality_program' => 'getInLoyalityProgram'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GENDER_MALE = 'male';
const GENDER_FEMALE = 'female';
const GENDER_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_MALE,
self::GENDER_FEMALE,
self::GENDER_NONE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['gym'] = isset($data['gym']) ? $data['gym'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['first_created'] = isset($data['first_created']) ? $data['first_created'] : null;
        $this->container['contract_started'] = isset($data['contract_started']) ? $data['contract_started'] : null;
        $this->container['offerings'] = isset($data['offerings']) ? $data['offerings'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['frozen'] = isset($data['frozen']) ? $data['frozen'] : null;
        $this->container['has_accepted_communication'] = isset($data['has_accepted_communication']) ? $data['has_accepted_communication'] : null;
        $this->container['in_loyality_program'] = isset($data['in_loyality_program']) ? $data['in_loyality_program'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return int
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param int $customer_number customer_number
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime $date_of_birth date_of_birth
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets gym
     *
     * @return \iBooking\Client\Model\MemberGym
     */
    public function getGym()
    {
        return $this->container['gym'];
    }

    /**
     * Sets gym
     *
     * @param \iBooking\Client\Model\MemberGym $gym gym
     *
     * @return $this
     */
    public function setGym($gym)
    {
        $this->container['gym'] = $gym;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \iBooking\Client\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \iBooking\Client\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets first_created
     *
     * @return \DateTime
     */
    public function getFirstCreated()
    {
        return $this->container['first_created'];
    }

    /**
     * Sets first_created
     *
     * @param \DateTime $first_created first_created
     *
     * @return $this
     */
    public function setFirstCreated($first_created)
    {
        $this->container['first_created'] = $first_created;

        return $this;
    }

    /**
     * Gets contract_started
     *
     * @return \DateTime
     */
    public function getContractStarted()
    {
        return $this->container['contract_started'];
    }

    /**
     * Sets contract_started
     *
     * @param \DateTime $contract_started contract_started
     *
     * @return $this
     */
    public function setContractStarted($contract_started)
    {
        $this->container['contract_started'] = $contract_started;

        return $this;
    }

    /**
     * Gets offerings
     *
     * @return int[]
     */
    public function getOfferings()
    {
        return $this->container['offerings'];
    }

    /**
     * Sets offerings
     *
     * @param int[] $offerings offerings
     *
     * @return $this
     */
    public function setOfferings($offerings)
    {
        $this->container['offerings'] = $offerings;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets frozen
     *
     * @return bool
     */
    public function getFrozen()
    {
        return $this->container['frozen'];
    }

    /**
     * Sets frozen
     *
     * @param bool $frozen frozen
     *
     * @return $this
     */
    public function setFrozen($frozen)
    {
        $this->container['frozen'] = $frozen;

        return $this;
    }

    /**
     * Gets has_accepted_communication
     *
     * @return \iBooking\Client\Model\CommunicationChannels
     */
    public function getHasAcceptedCommunication()
    {
        return $this->container['has_accepted_communication'];
    }

    /**
     * Sets has_accepted_communication
     *
     * @param \iBooking\Client\Model\CommunicationChannels $has_accepted_communication has_accepted_communication
     *
     * @return $this
     */
    public function setHasAcceptedCommunication($has_accepted_communication)
    {
        $this->container['has_accepted_communication'] = $has_accepted_communication;

        return $this;
    }

    /**
     * Gets in_loyality_program
     *
     * @return bool
     */
    public function getInLoyalityProgram()
    {
        return $this->container['in_loyality_program'];
    }

    /**
     * Sets in_loyality_program
     *
     * @param bool $in_loyality_program in_loyality_program
     *
     * @return $this
     */
    public function setInLoyalityProgram($in_loyality_program)
    {
        $this->container['in_loyality_program'] = $in_loyality_program;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
