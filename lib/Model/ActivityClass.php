<?php
/**
 * ActivityClass
 *
 * PHP version 5
 *
 * @category Class
 * @package  iBooking\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iBookings API - Final
 *
 * iBooking components
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iBooking\Client\Model;

use \ArrayAccess;
use \iBooking\Client\ObjectSerializer;

/**
 * ActivityClass Class Doc Comment
 *
 * @category Class
 * @package  iBooking\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivityClass implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ActivityClass';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'price' => 'float',
'payment_status' => 'string',
'booked' => 'bool',
'bookable' => 'bool',
'my_booking' => 'bool',
'booking_id' => 'int',
'user_status' => 'string',
'color' => 'string',
'booker' => '\iBooking\Client\Model\ActivityClassBooker',
'from' => '\DateTime',
'to' => '\DateTime',
'date' => '\DateTime',
'studio' => '\iBooking\Client\Model\ActivityClassStudio',
'resource' => '\iBooking\Client\Model\EventStudio',
'activity' => '\iBooking\Client\Model\EventStudio'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'name' => null,
'price' => 'float',
'payment_status' => null,
'booked' => null,
'bookable' => null,
'my_booking' => null,
'booking_id' => null,
'user_status' => null,
'color' => null,
'booker' => null,
'from' => 'date-time',
'to' => 'date-time',
'date' => 'date',
'studio' => null,
'resource' => null,
'activity' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'price' => 'price',
'payment_status' => 'paymentStatus',
'booked' => 'booked',
'bookable' => 'bookable',
'my_booking' => 'myBooking',
'booking_id' => 'bookingId',
'user_status' => 'userStatus',
'color' => 'color',
'booker' => 'booker',
'from' => 'from',
'to' => 'to',
'date' => 'date',
'studio' => 'studio',
'resource' => 'resource',
'activity' => 'activity'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'price' => 'setPrice',
'payment_status' => 'setPaymentStatus',
'booked' => 'setBooked',
'bookable' => 'setBookable',
'my_booking' => 'setMyBooking',
'booking_id' => 'setBookingId',
'user_status' => 'setUserStatus',
'color' => 'setColor',
'booker' => 'setBooker',
'from' => 'setFrom',
'to' => 'setTo',
'date' => 'setDate',
'studio' => 'setStudio',
'resource' => 'setResource',
'activity' => 'setActivity'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'price' => 'getPrice',
'payment_status' => 'getPaymentStatus',
'booked' => 'getBooked',
'bookable' => 'getBookable',
'my_booking' => 'getMyBooking',
'booking_id' => 'getBookingId',
'user_status' => 'getUserStatus',
'color' => 'getColor',
'booker' => 'getBooker',
'from' => 'getFrom',
'to' => 'getTo',
'date' => 'getDate',
'studio' => 'getStudio',
'resource' => 'getResource',
'activity' => 'getActivity'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_STATUS_PAID = 'paid';
const PAYMENT_STATUS_NOTPAID = 'notpaid';
const USER_STATUS_AVAILABLE = 'available';
const USER_STATUS_BOOKED = 'booked';
const USER_STATUS_NOSHOW = 'noshow';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_PAID,
self::PAYMENT_STATUS_NOTPAID,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserStatusAllowableValues()
    {
        return [
            self::USER_STATUS_AVAILABLE,
self::USER_STATUS_BOOKED,
self::USER_STATUS_NOSHOW,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['payment_status'] = isset($data['payment_status']) ? $data['payment_status'] : null;
        $this->container['booked'] = isset($data['booked']) ? $data['booked'] : null;
        $this->container['bookable'] = isset($data['bookable']) ? $data['bookable'] : null;
        $this->container['my_booking'] = isset($data['my_booking']) ? $data['my_booking'] : null;
        $this->container['booking_id'] = isset($data['booking_id']) ? $data['booking_id'] : null;
        $this->container['user_status'] = isset($data['user_status']) ? $data['user_status'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['booker'] = isset($data['booker']) ? $data['booker'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['studio'] = isset($data['studio']) ? $data['studio'] : null;
        $this->container['resource'] = isset($data['resource']) ? $data['resource'] : null;
        $this->container['activity'] = isset($data['activity']) ? $data['activity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUserStatusAllowableValues();
        if (!is_null($this->container['user_status']) && !in_array($this->container['user_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'user_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status payment_status
     *
     * @return $this
     */
    public function setPaymentStatus($payment_status)
    {
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($payment_status) && !in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets booked
     *
     * @return bool
     */
    public function getBooked()
    {
        return $this->container['booked'];
    }

    /**
     * Sets booked
     *
     * @param bool $booked booked
     *
     * @return $this
     */
    public function setBooked($booked)
    {
        $this->container['booked'] = $booked;

        return $this;
    }

    /**
     * Gets bookable
     *
     * @return bool
     */
    public function getBookable()
    {
        return $this->container['bookable'];
    }

    /**
     * Sets bookable
     *
     * @param bool $bookable bookable
     *
     * @return $this
     */
    public function setBookable($bookable)
    {
        $this->container['bookable'] = $bookable;

        return $this;
    }

    /**
     * Gets my_booking
     *
     * @return bool
     */
    public function getMyBooking()
    {
        return $this->container['my_booking'];
    }

    /**
     * Sets my_booking
     *
     * @param bool $my_booking my_booking
     *
     * @return $this
     */
    public function setMyBooking($my_booking)
    {
        $this->container['my_booking'] = $my_booking;

        return $this;
    }

    /**
     * Gets booking_id
     *
     * @return int
     */
    public function getBookingId()
    {
        return $this->container['booking_id'];
    }

    /**
     * Sets booking_id
     *
     * @param int $booking_id booking_id
     *
     * @return $this
     */
    public function setBookingId($booking_id)
    {
        $this->container['booking_id'] = $booking_id;

        return $this;
    }

    /**
     * Gets user_status
     *
     * @return string
     */
    public function getUserStatus()
    {
        return $this->container['user_status'];
    }

    /**
     * Sets user_status
     *
     * @param string $user_status user_status
     *
     * @return $this
     */
    public function setUserStatus($user_status)
    {
        $allowedValues = $this->getUserStatusAllowableValues();
        if (!is_null($user_status) && !in_array($user_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'user_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_status'] = $user_status;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets booker
     *
     * @return \iBooking\Client\Model\ActivityClassBooker
     */
    public function getBooker()
    {
        return $this->container['booker'];
    }

    /**
     * Sets booker
     *
     * @param \iBooking\Client\Model\ActivityClassBooker $booker booker
     *
     * @return $this
     */
    public function setBooker($booker)
    {
        $this->container['booker'] = $booker;

        return $this;
    }

    /**
     * Gets from
     *
     * @return \DateTime
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \DateTime $from from
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return \DateTime
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \DateTime $to to
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets studio
     *
     * @return \iBooking\Client\Model\ActivityClassStudio
     */
    public function getStudio()
    {
        return $this->container['studio'];
    }

    /**
     * Sets studio
     *
     * @param \iBooking\Client\Model\ActivityClassStudio $studio studio
     *
     * @return $this
     */
    public function setStudio($studio)
    {
        $this->container['studio'] = $studio;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return \iBooking\Client\Model\EventStudio
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param \iBooking\Client\Model\EventStudio $resource resource
     *
     * @return $this
     */
    public function setResource($resource)
    {
        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets activity
     *
     * @return \iBooking\Client\Model\EventStudio
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param \iBooking\Client\Model\EventStudio $activity activity
     *
     * @return $this
     */
    public function setActivity($activity)
    {
        $this->container['activity'] = $activity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
