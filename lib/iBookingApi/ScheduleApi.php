<?php
/**
 * ScheduleApi
 * PHP version 5
 *
 * @category Class
 * @package  iBooking\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iBookings API - Final
 *
 * iBooking components
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace iBooking\Client\iBookingApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use iBooking\Client\ApiException;
use iBooking\Client\Configuration;
use iBooking\Client\HeaderSelector;
use iBooking\Client\ObjectSerializer;

/**
 * ScheduleApi Class Doc Comment
 *
 * @category Class
 * @package  iBooking\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScheduleApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getBasicInfo
     *
     * This method returns basic information, and optionally also the output of the getStudios and getInstructors methods.
     *
     * @param  bool $include_studios If true, the output will include the output from getStudios. (optional)
     * @param  bool $include_instructors If true, the output will include the output from getInstructors. (optional)
     * @param  bool $only_with_future_classes If true, only instructors with classes today or later will be returned from getInstructors. Default value: 0 (optional)
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iBooking\Client\Model\GetBasicInfoResponse
     */
    public function getBasicInfo($include_studios = null, $include_instructors = null, $only_with_future_classes = null)
    {
        list($response) = $this->getBasicInfoWithHttpInfo($include_studios, $include_instructors, $only_with_future_classes);
        return $response;
    }

    /**
     * Operation getBasicInfoWithHttpInfo
     *
     * This method returns basic information, and optionally also the output of the getStudios and getInstructors methods.
     *
     * @param  bool $include_studios If true, the output will include the output from getStudios. (optional)
     * @param  bool $include_instructors If true, the output will include the output from getInstructors. (optional)
     * @param  bool $only_with_future_classes If true, only instructors with classes today or later will be returned from getInstructors. Default value: 0 (optional)
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iBooking\Client\Model\GetBasicInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBasicInfoWithHttpInfo($include_studios = null, $include_instructors = null, $only_with_future_classes = null)
    {
        $returnType = '\iBooking\Client\Model\GetBasicInfoResponse';
        $request = $this->getBasicInfoRequest($include_studios, $include_instructors, $only_with_future_classes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\GetBasicInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBasicInfoAsync
     *
     * This method returns basic information, and optionally also the output of the getStudios and getInstructors methods.
     *
     * @param  bool $include_studios If true, the output will include the output from getStudios. (optional)
     * @param  bool $include_instructors If true, the output will include the output from getInstructors. (optional)
     * @param  bool $only_with_future_classes If true, only instructors with classes today or later will be returned from getInstructors. Default value: 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBasicInfoAsync($include_studios = null, $include_instructors = null, $only_with_future_classes = null)
    {
        return $this->getBasicInfoAsyncWithHttpInfo($include_studios, $include_instructors, $only_with_future_classes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBasicInfoAsyncWithHttpInfo
     *
     * This method returns basic information, and optionally also the output of the getStudios and getInstructors methods.
     *
     * @param  bool $include_studios If true, the output will include the output from getStudios. (optional)
     * @param  bool $include_instructors If true, the output will include the output from getInstructors. (optional)
     * @param  bool $only_with_future_classes If true, only instructors with classes today or later will be returned from getInstructors. Default value: 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBasicInfoAsyncWithHttpInfo($include_studios = null, $include_instructors = null, $only_with_future_classes = null)
    {
        $returnType = '\iBooking\Client\Model\GetBasicInfoResponse';
        $request = $this->getBasicInfoRequest($include_studios, $include_instructors, $only_with_future_classes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBasicInfo'
     *
     * @param  bool $include_studios If true, the output will include the output from getStudios. (optional)
     * @param  bool $include_instructors If true, the output will include the output from getInstructors. (optional)
     * @param  bool $only_with_future_classes If true, only instructors with classes today or later will be returned from getInstructors. Default value: 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBasicInfoRequest($include_studios = null, $include_instructors = null, $only_with_future_classes = null)
    {

        $resourcePath = '/Schedule/getBasicInfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_studios !== null) {
            $queryParams['includeStudios'] = ObjectSerializer::toQueryValue($include_studios, null);
        }
        // query params
        if ($include_instructors !== null) {
            $queryParams['includeInstructors'] = ObjectSerializer::toQueryValue($include_instructors, null);
        }
        // query params
        if ($only_with_future_classes !== null) {
            $queryParams['onlyWithFutureClasses'] = ObjectSerializer::toQueryValue($only_with_future_classes, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Access-Token');
        if ($apiKey !== null) {
            $headers['X-Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScheduleStudios
     *
     * This method returns a full list of all studios that belongs to the parent entity.
     *
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iBooking\Client\Model\GetScheduleStudiosResponse
     */
    public function getScheduleStudios()
    {
        list($response) = $this->getScheduleStudiosWithHttpInfo();
        return $response;
    }

    /**
     * Operation getScheduleStudiosWithHttpInfo
     *
     * This method returns a full list of all studios that belongs to the parent entity.
     *
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iBooking\Client\Model\GetScheduleStudiosResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScheduleStudiosWithHttpInfo()
    {
        $returnType = '\iBooking\Client\Model\GetScheduleStudiosResponse';
        $request = $this->getScheduleStudiosRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\GetScheduleStudiosResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScheduleStudiosAsync
     *
     * This method returns a full list of all studios that belongs to the parent entity.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScheduleStudiosAsync()
    {
        return $this->getScheduleStudiosAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getScheduleStudiosAsyncWithHttpInfo
     *
     * This method returns a full list of all studios that belongs to the parent entity.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScheduleStudiosAsyncWithHttpInfo()
    {
        $returnType = '\iBooking\Client\Model\GetScheduleStudiosResponse';
        $request = $this->getScheduleStudiosRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getScheduleStudios'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getScheduleStudiosRequest()
    {

        $resourcePath = '/Schedule/getStudios';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Access-Token');
        if ($apiKey !== null) {
            $headers['X-Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleAddBookingPost
     *
     * This method adds a booking to the provided class for the provided user (via token).
     *
     * @param  \iBooking\Client\Model\AddBookingPayload $body AddBookingRequestParameters object (required)
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iBooking\Client\Model\AddScheduleBookingResponse
     */
    public function scheduleAddBookingPost($body)
    {
        list($response) = $this->scheduleAddBookingPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation scheduleAddBookingPostWithHttpInfo
     *
     * This method adds a booking to the provided class for the provided user (via token).
     *
     * @param  \iBooking\Client\Model\AddBookingPayload $body AddBookingRequestParameters object (required)
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iBooking\Client\Model\AddScheduleBookingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleAddBookingPostWithHttpInfo($body)
    {
        $returnType = '\iBooking\Client\Model\AddScheduleBookingResponse';
        $request = $this->scheduleAddBookingPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\AddScheduleBookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleAddBookingPostAsync
     *
     * This method adds a booking to the provided class for the provided user (via token).
     *
     * @param  \iBooking\Client\Model\AddBookingPayload $body AddBookingRequestParameters object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleAddBookingPostAsync($body)
    {
        return $this->scheduleAddBookingPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleAddBookingPostAsyncWithHttpInfo
     *
     * This method adds a booking to the provided class for the provided user (via token).
     *
     * @param  \iBooking\Client\Model\AddBookingPayload $body AddBookingRequestParameters object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleAddBookingPostAsyncWithHttpInfo($body)
    {
        $returnType = '\iBooking\Client\Model\AddScheduleBookingResponse';
        $request = $this->scheduleAddBookingPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleAddBookingPost'
     *
     * @param  \iBooking\Client\Model\AddBookingPayload $body AddBookingRequestParameters object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleAddBookingPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling scheduleAddBookingPost'
            );
        }

        $resourcePath = '/Schedule/addBooking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Access-Token');
        if ($apiKey !== null) {
            $headers['X-Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleCancelBookingPost
     *
     * This method cancels/deletes a booking from the provided class for the provided user (via token).
     *
     * @param  \iBooking\Client\Model\CancelScheduleBookingPayload $body body (optional)
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iBooking\Client\Model\CancelScheduleBookingResponse
     */
    public function scheduleCancelBookingPost($body = null)
    {
        list($response) = $this->scheduleCancelBookingPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation scheduleCancelBookingPostWithHttpInfo
     *
     * This method cancels/deletes a booking from the provided class for the provided user (via token).
     *
     * @param  \iBooking\Client\Model\CancelScheduleBookingPayload $body (optional)
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iBooking\Client\Model\CancelScheduleBookingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleCancelBookingPostWithHttpInfo($body = null)
    {
        $returnType = '\iBooking\Client\Model\CancelScheduleBookingResponse';
        $request = $this->scheduleCancelBookingPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\CancelScheduleBookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleCancelBookingPostAsync
     *
     * This method cancels/deletes a booking from the provided class for the provided user (via token).
     *
     * @param  \iBooking\Client\Model\CancelScheduleBookingPayload $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleCancelBookingPostAsync($body = null)
    {
        return $this->scheduleCancelBookingPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleCancelBookingPostAsyncWithHttpInfo
     *
     * This method cancels/deletes a booking from the provided class for the provided user (via token).
     *
     * @param  \iBooking\Client\Model\CancelScheduleBookingPayload $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleCancelBookingPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\iBooking\Client\Model\CancelScheduleBookingResponse';
        $request = $this->scheduleCancelBookingPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleCancelBookingPost'
     *
     * @param  \iBooking\Client\Model\CancelScheduleBookingPayload $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleCancelBookingPostRequest($body = null)
    {

        $resourcePath = '/Schedule/cancelBooking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Access-Token');
        if ($apiKey !== null) {
            $headers['X-Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleGetClassGet
     *
     * Will return all information related to a group class, including descriptions and/or images of the class/instructors.
     *
     * @param  int $id The unique ID for the class to get information about. (required)
     * @param  string $lang Language code in ISO 3166-1 alpha-2 format. Default value: NO (optional)
     * @param  string $token A user authorization token. (optional)
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iBooking\Client\Model\GetGroupClassesResponse
     */
    public function scheduleGetClassGet($id, $lang = null, $token = null)
    {
        list($response) = $this->scheduleGetClassGetWithHttpInfo($id, $lang, $token);
        return $response;
    }

    /**
     * Operation scheduleGetClassGetWithHttpInfo
     *
     * Will return all information related to a group class, including descriptions and/or images of the class/instructors.
     *
     * @param  int $id The unique ID for the class to get information about. (required)
     * @param  string $lang Language code in ISO 3166-1 alpha-2 format. Default value: NO (optional)
     * @param  string $token A user authorization token. (optional)
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iBooking\Client\Model\GetGroupClassesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleGetClassGetWithHttpInfo($id, $lang = null, $token = null)
    {
        $returnType = '\iBooking\Client\Model\GetGroupClassesResponse';
        $request = $this->scheduleGetClassGetRequest($id, $lang, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\GetGroupClassesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleGetClassGetAsync
     *
     * Will return all information related to a group class, including descriptions and/or images of the class/instructors.
     *
     * @param  int $id The unique ID for the class to get information about. (required)
     * @param  string $lang Language code in ISO 3166-1 alpha-2 format. Default value: NO (optional)
     * @param  string $token A user authorization token. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetClassGetAsync($id, $lang = null, $token = null)
    {
        return $this->scheduleGetClassGetAsyncWithHttpInfo($id, $lang, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleGetClassGetAsyncWithHttpInfo
     *
     * Will return all information related to a group class, including descriptions and/or images of the class/instructors.
     *
     * @param  int $id The unique ID for the class to get information about. (required)
     * @param  string $lang Language code in ISO 3166-1 alpha-2 format. Default value: NO (optional)
     * @param  string $token A user authorization token. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetClassGetAsyncWithHttpInfo($id, $lang = null, $token = null)
    {
        $returnType = '\iBooking\Client\Model\GetGroupClassesResponse';
        $request = $this->scheduleGetClassGetRequest($id, $lang, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleGetClassGet'
     *
     * @param  int $id The unique ID for the class to get information about. (required)
     * @param  string $lang Language code in ISO 3166-1 alpha-2 format. Default value: NO (optional)
     * @param  string $token A user authorization token. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleGetClassGetRequest($id, $lang = null, $token = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling scheduleGetClassGet'
            );
        }

        $resourcePath = '/Schedule/getClass';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang, null);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Access-Token');
        if ($apiKey !== null) {
            $headers['X-Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleGetInstructorsGet
     *
     * This method returns a full list of all group class instructors.
     *
     * @param  bool $only_with_future_classes Only list instructors with classes today or in the future. Default value: 0 (optional)
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iBooking\Client\Model\GetScheduleInstructorsResponse
     */
    public function scheduleGetInstructorsGet($only_with_future_classes = null)
    {
        list($response) = $this->scheduleGetInstructorsGetWithHttpInfo($only_with_future_classes);
        return $response;
    }

    /**
     * Operation scheduleGetInstructorsGetWithHttpInfo
     *
     * This method returns a full list of all group class instructors.
     *
     * @param  bool $only_with_future_classes Only list instructors with classes today or in the future. Default value: 0 (optional)
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iBooking\Client\Model\GetScheduleInstructorsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleGetInstructorsGetWithHttpInfo($only_with_future_classes = null)
    {
        $returnType = '\iBooking\Client\Model\GetScheduleInstructorsResponse';
        $request = $this->scheduleGetInstructorsGetRequest($only_with_future_classes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\GetScheduleInstructorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleGetInstructorsGetAsync
     *
     * This method returns a full list of all group class instructors.
     *
     * @param  bool $only_with_future_classes Only list instructors with classes today or in the future. Default value: 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetInstructorsGetAsync($only_with_future_classes = null)
    {
        return $this->scheduleGetInstructorsGetAsyncWithHttpInfo($only_with_future_classes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleGetInstructorsGetAsyncWithHttpInfo
     *
     * This method returns a full list of all group class instructors.
     *
     * @param  bool $only_with_future_classes Only list instructors with classes today or in the future. Default value: 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetInstructorsGetAsyncWithHttpInfo($only_with_future_classes = null)
    {
        $returnType = '\iBooking\Client\Model\GetScheduleInstructorsResponse';
        $request = $this->scheduleGetInstructorsGetRequest($only_with_future_classes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleGetInstructorsGet'
     *
     * @param  bool $only_with_future_classes Only list instructors with classes today or in the future. Default value: 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleGetInstructorsGetRequest($only_with_future_classes = null)
    {

        $resourcePath = '/Schedule/getInstructors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($only_with_future_classes !== null) {
            $queryParams['onlyWithFutureClasses'] = ObjectSerializer::toQueryValue($only_with_future_classes, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Access-Token');
        if ($apiKey !== null) {
            $headers['X-Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleGetScheduleGet
     *
     * Will return the group class schedule. All parameters are GET parameters.
     *
     * @param  string $studios Comma separated list of studio IDs to include. All studios are returned by default. (optional)
     * @param  string $categories Comma separated list of category IDs to include. All categories are returned by default. (optional)
     * @param  string $instructors Comma separated list of instructor IDs to include. All instructors are returned by default. (optional)
     * @param  \DateTime $from Inclusive from date in format YYYY-MM-DD. If blank, today is used as from date. (optional)
     * @param  string $lang Language code in ISO 3166-1 alpha-2 format. Default value: NO (optional)
     * @param  string $token token (optional)
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \iBooking\Client\Model\GetScheduleScheduleResponse
     */
    public function scheduleGetScheduleGet($studios = null, $categories = null, $instructors = null, $from = null, $lang = null, $token = null)
    {
        list($response) = $this->scheduleGetScheduleGetWithHttpInfo($studios, $categories, $instructors, $from, $lang, $token);
        return $response;
    }

    /**
     * Operation scheduleGetScheduleGetWithHttpInfo
     *
     * Will return the group class schedule. All parameters are GET parameters.
     *
     * @param  string $studios Comma separated list of studio IDs to include. All studios are returned by default. (optional)
     * @param  string $categories Comma separated list of category IDs to include. All categories are returned by default. (optional)
     * @param  string $instructors Comma separated list of instructor IDs to include. All instructors are returned by default. (optional)
     * @param  \DateTime $from Inclusive from date in format YYYY-MM-DD. If blank, today is used as from date. (optional)
     * @param  string $lang Language code in ISO 3166-1 alpha-2 format. Default value: NO (optional)
     * @param  string $token (optional)
     *
     * @throws \iBooking\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \iBooking\Client\Model\GetScheduleScheduleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleGetScheduleGetWithHttpInfo($studios = null, $categories = null, $instructors = null, $from = null, $lang = null, $token = null)
    {
        $returnType = '\iBooking\Client\Model\GetScheduleScheduleResponse';
        $request = $this->scheduleGetScheduleGetRequest($studios, $categories, $instructors, $from, $lang, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\GetScheduleScheduleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\iBooking\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleGetScheduleGetAsync
     *
     * Will return the group class schedule. All parameters are GET parameters.
     *
     * @param  string $studios Comma separated list of studio IDs to include. All studios are returned by default. (optional)
     * @param  string $categories Comma separated list of category IDs to include. All categories are returned by default. (optional)
     * @param  string $instructors Comma separated list of instructor IDs to include. All instructors are returned by default. (optional)
     * @param  \DateTime $from Inclusive from date in format YYYY-MM-DD. If blank, today is used as from date. (optional)
     * @param  string $lang Language code in ISO 3166-1 alpha-2 format. Default value: NO (optional)
     * @param  string $token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetScheduleGetAsync($studios = null, $categories = null, $instructors = null, $from = null, $lang = null, $token = null)
    {
        return $this->scheduleGetScheduleGetAsyncWithHttpInfo($studios, $categories, $instructors, $from, $lang, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleGetScheduleGetAsyncWithHttpInfo
     *
     * Will return the group class schedule. All parameters are GET parameters.
     *
     * @param  string $studios Comma separated list of studio IDs to include. All studios are returned by default. (optional)
     * @param  string $categories Comma separated list of category IDs to include. All categories are returned by default. (optional)
     * @param  string $instructors Comma separated list of instructor IDs to include. All instructors are returned by default. (optional)
     * @param  \DateTime $from Inclusive from date in format YYYY-MM-DD. If blank, today is used as from date. (optional)
     * @param  string $lang Language code in ISO 3166-1 alpha-2 format. Default value: NO (optional)
     * @param  string $token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleGetScheduleGetAsyncWithHttpInfo($studios = null, $categories = null, $instructors = null, $from = null, $lang = null, $token = null)
    {
        $returnType = '\iBooking\Client\Model\GetScheduleScheduleResponse';
        $request = $this->scheduleGetScheduleGetRequest($studios, $categories, $instructors, $from, $lang, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleGetScheduleGet'
     *
     * @param  string $studios Comma separated list of studio IDs to include. All studios are returned by default. (optional)
     * @param  string $categories Comma separated list of category IDs to include. All categories are returned by default. (optional)
     * @param  string $instructors Comma separated list of instructor IDs to include. All instructors are returned by default. (optional)
     * @param  \DateTime $from Inclusive from date in format YYYY-MM-DD. If blank, today is used as from date. (optional)
     * @param  string $lang Language code in ISO 3166-1 alpha-2 format. Default value: NO (optional)
     * @param  string $token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleGetScheduleGetRequest($studios = null, $categories = null, $instructors = null, $from = null, $lang = null, $token = null)
    {

        $resourcePath = '/Schedule/getSchedule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($studios !== null) {
            $queryParams['studios'] = ObjectSerializer::toQueryValue($studios, null);
        }
        // query params
        if ($categories !== null) {
            $queryParams['categories'] = ObjectSerializer::toQueryValue($categories, null);
        }
        // query params
        if ($instructors !== null) {
            $queryParams['instructors'] = ObjectSerializer::toQueryValue($instructors, null);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, 'date');
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang, null);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Access-Token');
        if ($apiKey !== null) {
            $headers['X-Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
